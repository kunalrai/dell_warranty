{% extends "base.html" %}

{% block content %}
<div class="min-h-screen bg-gray-100">
    <!-- Main Content -->
    <div class="ml-64">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
            {% if total_assets > 0 %}
            <!-- Key Metrics -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-medium text-gray-900">Total Assets</h3>
                    <p class="text-3xl font-bold text-blue-600">{{ total_assets }}</p>
                </div>
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-medium text-gray-900">Expiring Soon</h3>
                    <p class="text-3xl font-bold text-yellow-600">{{ expiring_soon }}</p>
                </div>
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-medium text-gray-900">Expired</h3>
                    <p class="text-3xl font-bold text-red-600">{{ expired }}</p>
                </div>
            </div>

        <!-- Charts -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div id="warrantyPieChart"></div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div id="serviceLevelChart"></div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <div id="timelineChart"></div>
        </div>

        <!-- Data Table -->
        <div class="bg-white rounded-lg shadow">
            <div class="p-6">                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold">Assets</h2>
                    <div class="flex space-x-4">
                        <select id="modelFilter" class="rounded-md border-gray-300 shadow-sm">
                            <option value="">All Models</option>
                            {% for model in models %}
                            <option value="{{ model }}">{{ model }}</option>
                            {% endfor %}
                        </select>
                        <button id="exportCsv" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Export CSV</button>
                        <input type="text" id="tableSearch" placeholder="Search..." class="rounded-md border-gray-300 shadow-sm">
                    </div>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Service Tag</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Model</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Warranty Type</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Start Date</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer">End Date</th>
                                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer">Service Level</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200" id="assetsTable">
                            <!-- Data will be populated via JavaScript -->
                        </tbody>
                    </table>
                </div>
                <div class="mt-4 flex justify-between items-center">
                    <div class="text-sm text-gray-700">
                        Showing <span id="currentRange"></span> of <span id="totalItems"></span> items
                    </div>
                    <div class="flex space-x-2">
                        <button id="prevPage" class="px-3 py-1 border rounded-md">Previous</button>
                        <button id="nextPage" class="px-3 py-1 border rounded-md">Next</button>
                    </div>                </div>
            </div>
        </div>        
            {% else %}
                <!-- No Data State -->
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V7a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No warranty data</h3>
                    <p class="mt-1 text-sm text-gray-500">Get started by uploading your Dell service tags.</p>
                    <div class="mt-6">
                        <a href="{{ url_for('upload') }}" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Upload Service Tags
                        </a>
                    </div>
                </div>
            {% endif %}
        </div>
    </div>
</div>

{% if total_assets > 0 %}
<!-- Plotly.js -->
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize charts
        const charts = {{ charts|tojson|safe }};
        Plotly.newPlot('warrantyPieChart', JSON.parse(charts.warranty_pie));
        Plotly.newPlot('timelineChart', JSON.parse(charts.timeline));
        Plotly.newPlot('serviceLevelChart', JSON.parse(charts.service_bar));

        // Table state
        let currentPage = 1;
        let currentFilter = '';
        let currentSearch = '';

    // Load table data
    function loadTableData() {
        const url = new URL('/api/assets', window.location.origin);
        url.searchParams.set('page', currentPage);
        url.searchParams.set('per_page', 10);
        if (currentFilter) url.searchParams.set('model', currentFilter);
        
        fetch(url)
            .then(response => response.json())
            .then(data => {
                const tbody = document.getElementById('assetsTable');
                tbody.innerHTML = '';
                
                data.data.forEach(asset => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">${asset.service_tag}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${asset.model}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${asset.warranty_type}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${new Date(asset.warranty_start).toLocaleDateString()}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${new Date(asset.warranty_end).toLocaleDateString()}</td>
                        <td class="px-6 py-4 whitespace-nowrap">${asset.service_level}</td>
                    `;
                    tbody.appendChild(row);
                });

                // Update pagination info
                document.getElementById('currentRange').textContent = 
                    `${(currentPage - 1) * 10 + 1}-${Math.min(currentPage * 10, data.total)}`;
                document.getElementById('totalItems').textContent = data.total;
                
                // Update button states
                document.getElementById('prevPage').disabled = currentPage === 1;
                document.getElementById('nextPage').disabled = currentPage === data.pages;
            });
    }

    // Event listeners
    document.getElementById('modelFilter').addEventListener('change', (e) => {
        currentFilter = e.target.value;
        currentPage = 1;
        loadTableData();
    });

    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            loadTableData();
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        currentPage++;
        loadTableData();
    });

    document.getElementById('exportCsv').addEventListener('click', () => {
        const url = new URL('/api/export-csv', window.location.origin);
        if (currentFilter) url.searchParams.set('model', currentFilter);
        window.location.href = url.toString();
    });

    // Initial load
    loadTableData();
</script>
{% endif %}
{% endblock %}